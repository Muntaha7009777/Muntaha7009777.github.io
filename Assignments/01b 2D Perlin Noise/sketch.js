// 2D Perlin Noise
// Muntaha Chowdhury
// Oct 3, 2024
// Art generated by 2D Perlin Noise


let advanceBy = 0.01;


function setup() {
  createCanvas(windowWidth, windowHeight);
  pixelDensity(1);       //remove any scaling
  rectMode(CENTER);
}


function draw() {
  background(220);
  // drawColorfulCloud();
  // drawPerlinRectGrid();
  drawMovingPerlinRects();
}

function drawColorfulCloud() {
  // draw the Pelin graph cloud but colorful
  let yoff = 0;
  loadPixels();
  
  for (let y = 0; y < height; y++) {
    // goes through a row then goes down
    //everytime the loop wraps, the noise graph is targeted at x=0 and y at a higher point
    let xoff = 0;
    
    for (let x = 0; x < width; x++) {
 
      let index = (x + y * width) * 4;

      // get values for color 
      let r = noise(xoff, yoff) * 225;
      let g = noise(xoff+100, yoff) * 225;
      let b = noise(xoff+200, yoff) * 225;

      
      // setup RGBA 
      pixels[index + 0] = r;
      pixels[index + 1] = g;
      pixels[index + 2] = b;
      pixels[index + 3] = 255;
      
      
      xoff += advanceBy;    //move along the x for the next pixel in the same row
    }
    
    
    yoff += advanceBy;
  }
  updatePixels();
}


function drawPerlinRectGrid() {
  // draw rectangles at every 20

  for (let y = 0; y < height; y+=20) {
    for (let x = 0; x < width; x+=20) {
      // get a random size
      let shapeSize = noise(x, y);
      shapeSize = map(shapeSize, 0, 1, 0, 20);

      // get a random color
      let shapeColorR = noise(x, y);
      let shapeColorG = noise(x+250, y);
      let shapeColorB = noise(x+500, y);

      shapeColorR = map(shapeColorR, 0, 1, 0, 255);
      shapeColorG = map(shapeColorG, 0, 1, 0, 255);
      shapeColorB = map(shapeColorB, 0, 1, 0, 255);


      // draw the rectangle
      let index = (x + y * width) * 4;
      if (index%20 === 0) {
        fill(shapeColorR, shapeColorG, shapeColorB);
        rect(x, y, shapeSize);
      }

    }
  }
}

function drawMovingPerlinRects() {
  // square moves, fills, sizes according to perlin noise
  let shapeSize = noise(10, 20);
  shapeSize = map(shapeSize, -1, 1, 0, 100);
  rect(10, 10, shapeSize);
}